webpackJsonp([32],{43:function(n,i){n.exports='## Installation  \n\nSimply download and include with `<script>`. Omi will be registered as a global variable.\n\n* [Omi Development Version](https://unpkg.com/omi@latest/dist/omi.js)\n* [Omi Production Version](https://unpkg.com/omi@latest/dist/omi.min.js)\n\nInstall via npm:\n\n```\nnpm i omi\n```\n\n\n## CLI\n\nOmi provides the official CLI. You don\'t need to learn how to configure webpack, Babel or TypeScript. CLI helps you configure everything and provides various templates for different project types.\n\n```bash\n$ npm i omi-cli -g     # install cli\n$ omi init my-app      # init project\n$ cd my-app            \n$ npm start            # develop\n$ npm run build        # release\n```\n\n> `npx omi-cli init my-app` is also supported(npm v5.2.0+).\n\nDirectory description:\n\n```\n\u251c\u2500 config\n\u251c\u2500 public\n\u251c\u2500 scripts\n\u251c\u2500 src\n\u2502  \u251c\u2500 assets\n\u2502  \u251c\u2500 elements    //Store all custom elements\n\u2502  \u251c\u2500 store       //Store all this store of pages\n\u2502  \u251c\u2500 admin.js    //Entry js of compiler\uff0cwill build to admin.html\n\u2502  \u2514\u2500 index.js    //Entry js of compiler\uff0cwill build to index.html\n```\n\n\n### Scripts\n\n```json\n"scripts": {\n    "start": "node scripts/start.js",\n    "build": "PUBLIC_URL=. node scripts/build.js",\n    "build-windows": "set PUBLIC_URL=.&& node scripts/build.js",\n    "fix": "eslint src --fix"\n}\n```\n\nYou can set up the PUBLIC_URL, such as\uff1a\n\n```json\n...\n"build": "PUBLIC_URL=https://your.url.com/sub node scripts/build.js",\n"build-windows": "set PUBLIC_URL=https://your.url.com/sub&& node scripts/build.js",\n...\n```\n\n\n'}});
//# sourceMappingURL=32.a349a938.chunk.js.map